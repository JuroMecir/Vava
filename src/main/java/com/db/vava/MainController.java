package com.db.vava;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.persistence.criteria.CriteriaBuilder;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/character") // This means URL's start with /character (after Application path)
public class MainController {
    @Autowired // This means to get the bean called classRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClassRepository classRepository;
    @Autowired
    private SubclassRepository subclassRepository;
    @Autowired
    private RaceRepository raceRepository;
    @Autowired
    private BackgroundRepository backgroundRepository;

    //@CrossOrigin(origins = "*")
    @GetMapping(path="/classes")
    public @ResponseBody
    List<Class> getAllClasses() {
        // This returns a JSON or XML with the races
        List<Class> classes = new ArrayList<Class>();
        List<Integer> ids = classRepository.getAllIds();
        List<String> names = classRepository.getAllNames();
        for (int i = 0; i < ids.size(); i++) {
            Class actualClass = new Class();
            actualClass.setId(ids.get(i));
            actualClass.setName(names.get(i));
            classes.add(actualClass);
        }
        return classes;
    }

    //@CrossOrigin(origins = "*")
    @GetMapping(path="/subclasses")
    public @ResponseBody List<Subclass> getSubclasses(@RequestParam Integer classId) {
        // This returns a JSON or XML with the races
        List<Subclass> subclasses = new ArrayList<Subclass>();
        List<Integer> ids = subclassRepository.findIdsByClassId(classId);
        List<String> names = subclassRepository.findNamesByClassId(classId);
        for (int i = 0; i < ids.size(); i++) {
            Subclass actualSubclass = new Subclass();
            actualSubclass.setId(ids.get(i));
            actualSubclass.setName(names.get(i));
            actualSubclass.setClassId(classId);
            subclasses.add(actualSubclass);
        }
        return subclasses;
    }

    //@CrossOrigin(origins = "*")
    @GetMapping(path="/backgrounds")
    public @ResponseBody
    List<Background> getAllBackgrounds() {
        // This returns a JSON or XML with the races
        List<Background> backgrounds = new ArrayList<Background>();
        List<Integer> ids = backgroundRepository.getAllIds();
        List<String> names = backgroundRepository.getAllNames();
        for (int i = 0; i < ids.size(); i++) {
            Background actualBackground = new Background();
            actualBackground.setId(ids.get(i));
            actualBackground.setName(names.get(i));
            backgrounds.add(actualBackground);
        }
        return backgrounds;
    }

    //@CrossOrigin(origins = "*")
    @GetMapping(path="/races")
    public @ResponseBody
    List<Race> getAllRaces() {
        // This returns a JSON or XML with the races
        List<Race> races = new ArrayList<Race>();
        List<Integer> ids = raceRepository.getAllIds();
        List<String> names = raceRepository.getAllNames();
        for (int i = 0; i < ids.size(); i++) {
            Race actualRace = new Race();
            actualRace.setId(ids.get(i));
            actualRace.setName(names.get(i));
            races.add(actualRace);
        }
        return races;
    }

    @GetMapping(path="")
    public @ResponseBody Character getCharacter(@RequestParam Integer classId, @RequestParam Integer subclassId,
                                                     @RequestParam Integer backgroundId, @RequestParam Integer raceId) {
        Character character = new Character();
        character.setCharacterClass(classRepository.getById(classId));
        character.setCharacterSubclass(subclassRepository.getById(subclassId));
        character.setCharacterBackground(backgroundRepository.getById(backgroundId));
        character.setCharacterRace(raceRepository.getById(raceId));
        return character;
    }
}